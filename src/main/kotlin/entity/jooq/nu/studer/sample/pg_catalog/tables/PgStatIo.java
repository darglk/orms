/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import java.time.OffsetDateTime;

import nu.studer.sample.pg_catalog.PgCatalog;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatIo extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_stat_io</code>
     */
    public static final PgStatIo PG_STAT_IO = new PgStatIo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pg_catalog.pg_stat_io.backend_type</code>.
     */
    public final TableField<Record, String> BACKEND_TYPE = createField(DSL.name("backend_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.object</code>.
     */
    public final TableField<Record, String> OBJECT = createField(DSL.name("object"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.context</code>.
     */
    public final TableField<Record, String> CONTEXT = createField(DSL.name("context"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.reads</code>.
     */
    public final TableField<Record, Long> READS = createField(DSL.name("reads"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.read_time</code>.
     */
    public final TableField<Record, Double> READ_TIME = createField(DSL.name("read_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.writes</code>.
     */
    public final TableField<Record, Long> WRITES = createField(DSL.name("writes"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.write_time</code>.
     */
    public final TableField<Record, Double> WRITE_TIME = createField(DSL.name("write_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.writebacks</code>.
     */
    public final TableField<Record, Long> WRITEBACKS = createField(DSL.name("writebacks"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.writeback_time</code>.
     */
    public final TableField<Record, Double> WRITEBACK_TIME = createField(DSL.name("writeback_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.extends</code>.
     */
    public final TableField<Record, Long> EXTENDS = createField(DSL.name("extends"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.extend_time</code>.
     */
    public final TableField<Record, Double> EXTEND_TIME = createField(DSL.name("extend_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.op_bytes</code>.
     */
    public final TableField<Record, Long> OP_BYTES = createField(DSL.name("op_bytes"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.hits</code>.
     */
    public final TableField<Record, Long> HITS = createField(DSL.name("hits"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.evictions</code>.
     */
    public final TableField<Record, Long> EVICTIONS = createField(DSL.name("evictions"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.reuses</code>.
     */
    public final TableField<Record, Long> REUSES = createField(DSL.name("reuses"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.fsyncs</code>.
     */
    public final TableField<Record, Long> FSYNCS = createField(DSL.name("fsyncs"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.fsync_time</code>.
     */
    public final TableField<Record, Double> FSYNC_TIME = createField(DSL.name("fsync_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.stats_reset</code>.
     */
    public final TableField<Record, OffsetDateTime> STATS_RESET = createField(DSL.name("stats_reset"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgStatIo(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PgStatIo(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_stat_io" as  SELECT backend_type,
         object,
         context,
         reads,
         read_time,
         writes,
         write_time,
         writebacks,
         writeback_time,
         extends,
         extend_time,
         op_bytes,
         hits,
         evictions,
         reuses,
         fsyncs,
         fsync_time,
         stats_reset
        FROM pg_stat_get_io() b(backend_type, object, context, reads, read_time, writes, write_time, writebacks, writeback_time, extends, extend_time, op_bytes, hits, evictions, reuses, fsyncs, fsync_time, stats_reset);
        """));
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_io</code> table reference
     */
    public PgStatIo(String alias) {
        this(DSL.name(alias), PG_STAT_IO);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_io</code> table reference
     */
    public PgStatIo(Name alias) {
        this(alias, PG_STAT_IO);
    }

    /**
     * Create a <code>pg_catalog.pg_stat_io</code> table reference
     */
    public PgStatIo() {
        this(DSL.name("pg_stat_io"), null);
    }

    public <O extends Record> PgStatIo(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PG_STAT_IO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatIo as(String alias) {
        return new PgStatIo(DSL.name(alias), this);
    }

    @Override
    public PgStatIo as(Name alias) {
        return new PgStatIo(alias, this);
    }

    @Override
    public PgStatIo as(Table<?> alias) {
        return new PgStatIo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatIo rename(String name) {
        return new PgStatIo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatIo rename(Name name) {
        return new PgStatIo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatIo rename(Table<?> name) {
        return new PgStatIo(name.getQualifiedName(), null);
    }
}
