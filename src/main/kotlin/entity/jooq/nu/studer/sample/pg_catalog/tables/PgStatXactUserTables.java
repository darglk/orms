/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import nu.studer.sample.pg_catalog.PgCatalog;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatXactUserTables extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>pg_catalog.pg_stat_xact_user_tables</code>
     */
    public static final PgStatXactUserTables PG_STAT_XACT_USER_TABLES = new PgStatXactUserTables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pg_catalog.pg_stat_xact_user_tables.relid</code>.
     */
    public final TableField<Record, Long> RELID = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_xact_user_tables.schemaname</code>.
     */
    public final TableField<Record, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_xact_user_tables.relname</code>.
     */
    public final TableField<Record, String> RELNAME = createField(DSL.name("relname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_xact_user_tables.seq_scan</code>.
     */
    public final TableField<Record, Long> SEQ_SCAN = createField(DSL.name("seq_scan"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_xact_user_tables.seq_tup_read</code>.
     */
    public final TableField<Record, Long> SEQ_TUP_READ = createField(DSL.name("seq_tup_read"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_xact_user_tables.idx_scan</code>.
     */
    public final TableField<Record, Long> IDX_SCAN = createField(DSL.name("idx_scan"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_xact_user_tables.idx_tup_fetch</code>.
     */
    public final TableField<Record, Long> IDX_TUP_FETCH = createField(DSL.name("idx_tup_fetch"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_xact_user_tables.n_tup_ins</code>.
     */
    public final TableField<Record, Long> N_TUP_INS = createField(DSL.name("n_tup_ins"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_xact_user_tables.n_tup_upd</code>.
     */
    public final TableField<Record, Long> N_TUP_UPD = createField(DSL.name("n_tup_upd"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_xact_user_tables.n_tup_del</code>.
     */
    public final TableField<Record, Long> N_TUP_DEL = createField(DSL.name("n_tup_del"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_xact_user_tables.n_tup_hot_upd</code>.
     */
    public final TableField<Record, Long> N_TUP_HOT_UPD = createField(DSL.name("n_tup_hot_upd"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_xact_user_tables.n_tup_newpage_upd</code>.
     */
    public final TableField<Record, Long> N_TUP_NEWPAGE_UPD = createField(DSL.name("n_tup_newpage_upd"), SQLDataType.BIGINT, this, "");

    private PgStatXactUserTables(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PgStatXactUserTables(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_stat_xact_user_tables" as  SELECT relid,
          schemaname,
          relname,
          seq_scan,
          seq_tup_read,
          idx_scan,
          idx_tup_fetch,
          n_tup_ins,
          n_tup_upd,
          n_tup_del,
          n_tup_hot_upd,
          n_tup_newpage_upd
         FROM pg_stat_xact_all_tables
        WHERE ((schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name])) AND (schemaname !~ '^pg_toast'::text));
        """));
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_xact_user_tables</code> table
     * reference
     */
    public PgStatXactUserTables(String alias) {
        this(DSL.name(alias), PG_STAT_XACT_USER_TABLES);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_xact_user_tables</code> table
     * reference
     */
    public PgStatXactUserTables(Name alias) {
        this(alias, PG_STAT_XACT_USER_TABLES);
    }

    /**
     * Create a <code>pg_catalog.pg_stat_xact_user_tables</code> table reference
     */
    public PgStatXactUserTables() {
        this(DSL.name("pg_stat_xact_user_tables"), null);
    }

    public <O extends Record> PgStatXactUserTables(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PG_STAT_XACT_USER_TABLES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatXactUserTables as(String alias) {
        return new PgStatXactUserTables(DSL.name(alias), this);
    }

    @Override
    public PgStatXactUserTables as(Name alias) {
        return new PgStatXactUserTables(alias, this);
    }

    @Override
    public PgStatXactUserTables as(Table<?> alias) {
        return new PgStatXactUserTables(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatXactUserTables rename(String name) {
        return new PgStatXactUserTables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatXactUserTables rename(Name name) {
        return new PgStatXactUserTables(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatXactUserTables rename(Table<?> name) {
        return new PgStatXactUserTables(name.getQualifiedName(), null);
    }
}
