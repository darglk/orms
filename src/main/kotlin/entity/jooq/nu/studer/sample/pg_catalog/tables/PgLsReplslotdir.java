/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import java.time.OffsetDateTime;

import nu.studer.sample.pg_catalog.PgCatalog;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgLsReplslotdir extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_ls_replslotdir</code>
     */
    public static final PgLsReplslotdir PG_LS_REPLSLOTDIR = new PgLsReplslotdir();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pg_catalog.pg_ls_replslotdir.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_ls_replslotdir.size</code>.
     */
    public final TableField<Record, Long> SIZE = createField(DSL.name("size"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_ls_replslotdir.modification</code>.
     */
    public final TableField<Record, OffsetDateTime> MODIFICATION = createField(DSL.name("modification"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgLsReplslotdir(Name alias, Table<Record> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.CLOB)
        });
    }

    private PgLsReplslotdir(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ls_replslotdir</code> table
     * reference
     */
    public PgLsReplslotdir(String alias) {
        this(DSL.name(alias), PG_LS_REPLSLOTDIR);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ls_replslotdir</code> table
     * reference
     */
    public PgLsReplslotdir(Name alias) {
        this(alias, PG_LS_REPLSLOTDIR);
    }

    /**
     * Create a <code>pg_catalog.pg_ls_replslotdir</code> table reference
     */
    public PgLsReplslotdir() {
        this(DSL.name("pg_ls_replslotdir"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgLsReplslotdir as(String alias) {
        return new PgLsReplslotdir(DSL.name(alias), this, parameters);
    }

    @Override
    public PgLsReplslotdir as(Name alias) {
        return new PgLsReplslotdir(alias, this, parameters);
    }

    @Override
    public PgLsReplslotdir as(Table<?> alias) {
        return new PgLsReplslotdir(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgLsReplslotdir rename(String name) {
        return new PgLsReplslotdir(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgLsReplslotdir rename(Name name) {
        return new PgLsReplslotdir(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgLsReplslotdir rename(Table<?> name) {
        return new PgLsReplslotdir(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public PgLsReplslotdir call(
          String slotName
    ) {
        PgLsReplslotdir result = new PgLsReplslotdir(DSL.name("pg_ls_replslotdir"), null, new Field[] {
            DSL.val(slotName, SQLDataType.CLOB)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public PgLsReplslotdir call(
          Field<String> slotName
    ) {
        PgLsReplslotdir result = new PgLsReplslotdir(DSL.name("pg_ls_replslotdir"), null, new Field[] {
            slotName
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
