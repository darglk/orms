/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import nu.studer.sample.pg_catalog.PgCatalog;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgBackendMemoryContexts extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>pg_catalog.pg_backend_memory_contexts</code>
     */
    public static final PgBackendMemoryContexts PG_BACKEND_MEMORY_CONTEXTS = new PgBackendMemoryContexts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pg_catalog.pg_backend_memory_contexts.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_backend_memory_contexts.ident</code>.
     */
    public final TableField<Record, String> IDENT = createField(DSL.name("ident"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_backend_memory_contexts.parent</code>.
     */
    public final TableField<Record, String> PARENT = createField(DSL.name("parent"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_backend_memory_contexts.level</code>.
     */
    public final TableField<Record, Integer> LEVEL = createField(DSL.name("level"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_backend_memory_contexts.total_bytes</code>.
     */
    public final TableField<Record, Long> TOTAL_BYTES = createField(DSL.name("total_bytes"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_backend_memory_contexts.total_nblocks</code>.
     */
    public final TableField<Record, Long> TOTAL_NBLOCKS = createField(DSL.name("total_nblocks"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_backend_memory_contexts.free_bytes</code>.
     */
    public final TableField<Record, Long> FREE_BYTES = createField(DSL.name("free_bytes"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_backend_memory_contexts.free_chunks</code>.
     */
    public final TableField<Record, Long> FREE_CHUNKS = createField(DSL.name("free_chunks"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_backend_memory_contexts.used_bytes</code>.
     */
    public final TableField<Record, Long> USED_BYTES = createField(DSL.name("used_bytes"), SQLDataType.BIGINT, this, "");

    private PgBackendMemoryContexts(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PgBackendMemoryContexts(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_backend_memory_contexts" as  SELECT name,
         ident,
         parent,
         level,
         total_bytes,
         total_nblocks,
         free_bytes,
         free_chunks,
         used_bytes
        FROM pg_get_backend_memory_contexts() pg_get_backend_memory_contexts(name, ident, parent, level, total_bytes, total_nblocks, free_bytes, free_chunks, used_bytes);
        """));
    }

    /**
     * Create an aliased <code>pg_catalog.pg_backend_memory_contexts</code>
     * table reference
     */
    public PgBackendMemoryContexts(String alias) {
        this(DSL.name(alias), PG_BACKEND_MEMORY_CONTEXTS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_backend_memory_contexts</code>
     * table reference
     */
    public PgBackendMemoryContexts(Name alias) {
        this(alias, PG_BACKEND_MEMORY_CONTEXTS);
    }

    /**
     * Create a <code>pg_catalog.pg_backend_memory_contexts</code> table
     * reference
     */
    public PgBackendMemoryContexts() {
        this(DSL.name("pg_backend_memory_contexts"), null);
    }

    public <O extends Record> PgBackendMemoryContexts(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PG_BACKEND_MEMORY_CONTEXTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgBackendMemoryContexts as(String alias) {
        return new PgBackendMemoryContexts(DSL.name(alias), this);
    }

    @Override
    public PgBackendMemoryContexts as(Name alias) {
        return new PgBackendMemoryContexts(alias, this);
    }

    @Override
    public PgBackendMemoryContexts as(Table<?> alias) {
        return new PgBackendMemoryContexts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgBackendMemoryContexts rename(String name) {
        return new PgBackendMemoryContexts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgBackendMemoryContexts rename(Name name) {
        return new PgBackendMemoryContexts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgBackendMemoryContexts rename(Table<?> name) {
        return new PgBackendMemoryContexts(name.getQualifiedName(), null);
    }
}
