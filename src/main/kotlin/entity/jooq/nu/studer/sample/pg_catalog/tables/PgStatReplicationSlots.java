/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import java.time.OffsetDateTime;

import nu.studer.sample.pg_catalog.PgCatalog;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatReplicationSlots extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>pg_catalog.pg_stat_replication_slots</code>
     */
    public static final PgStatReplicationSlots PG_STAT_REPLICATION_SLOTS = new PgStatReplicationSlots();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pg_catalog.pg_stat_replication_slots.slot_name</code>.
     */
    public final TableField<Record, String> SLOT_NAME = createField(DSL.name("slot_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_replication_slots.spill_txns</code>.
     */
    public final TableField<Record, Long> SPILL_TXNS = createField(DSL.name("spill_txns"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_replication_slots.spill_count</code>.
     */
    public final TableField<Record, Long> SPILL_COUNT = createField(DSL.name("spill_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_replication_slots.spill_bytes</code>.
     */
    public final TableField<Record, Long> SPILL_BYTES = createField(DSL.name("spill_bytes"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_replication_slots.stream_txns</code>.
     */
    public final TableField<Record, Long> STREAM_TXNS = createField(DSL.name("stream_txns"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_replication_slots.stream_count</code>.
     */
    public final TableField<Record, Long> STREAM_COUNT = createField(DSL.name("stream_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_replication_slots.stream_bytes</code>.
     */
    public final TableField<Record, Long> STREAM_BYTES = createField(DSL.name("stream_bytes"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_replication_slots.total_txns</code>.
     */
    public final TableField<Record, Long> TOTAL_TXNS = createField(DSL.name("total_txns"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_replication_slots.total_bytes</code>.
     */
    public final TableField<Record, Long> TOTAL_BYTES = createField(DSL.name("total_bytes"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_replication_slots.stats_reset</code>.
     */
    public final TableField<Record, OffsetDateTime> STATS_RESET = createField(DSL.name("stats_reset"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgStatReplicationSlots(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PgStatReplicationSlots(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_stat_replication_slots" as  SELECT s.slot_name,
          s.spill_txns,
          s.spill_count,
          s.spill_bytes,
          s.stream_txns,
          s.stream_count,
          s.stream_bytes,
          s.total_txns,
          s.total_bytes,
          s.stats_reset
         FROM pg_replication_slots r,
          LATERAL pg_stat_get_replication_slot((r.slot_name)::text) s(slot_name, spill_txns, spill_count, spill_bytes, stream_txns, stream_count, stream_bytes, total_txns, total_bytes, stats_reset)
        WHERE (r.datoid IS NOT NULL);
        """));
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_replication_slots</code> table
     * reference
     */
    public PgStatReplicationSlots(String alias) {
        this(DSL.name(alias), PG_STAT_REPLICATION_SLOTS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_replication_slots</code> table
     * reference
     */
    public PgStatReplicationSlots(Name alias) {
        this(alias, PG_STAT_REPLICATION_SLOTS);
    }

    /**
     * Create a <code>pg_catalog.pg_stat_replication_slots</code> table
     * reference
     */
    public PgStatReplicationSlots() {
        this(DSL.name("pg_stat_replication_slots"), null);
    }

    public <O extends Record> PgStatReplicationSlots(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PG_STAT_REPLICATION_SLOTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatReplicationSlots as(String alias) {
        return new PgStatReplicationSlots(DSL.name(alias), this);
    }

    @Override
    public PgStatReplicationSlots as(Name alias) {
        return new PgStatReplicationSlots(alias, this);
    }

    @Override
    public PgStatReplicationSlots as(Table<?> alias) {
        return new PgStatReplicationSlots(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatReplicationSlots rename(String name) {
        return new PgStatReplicationSlots(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatReplicationSlots rename(Name name) {
        return new PgStatReplicationSlots(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatReplicationSlots rename(Table<?> name) {
        return new PgStatReplicationSlots(name.getQualifiedName(), null);
    }
}
