/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.orms.tables;


import java.util.Arrays;
import java.util.List;

import nu.studer.sample.orms.Keys;
import nu.studer.sample.orms.Orms;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersUsers extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>orms.users_users</code>
     */
    public static final UsersUsers USERS_USERS = new UsersUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>orms.users_users.id</code>.
     */
    public final TableField<Record, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>orms.users_users.email</code>.
     */
    public final TableField<Record, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>orms.users_users.password_hash</code>.
     */
    public final TableField<Record, String> PASSWORD_HASH = createField(DSL.name("password_hash"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>orms.users_users.enabled</code>.
     */
    public final TableField<Record, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private UsersUsers(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private UsersUsers(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>orms.users_users</code> table reference
     */
    public UsersUsers(String alias) {
        this(DSL.name(alias), USERS_USERS);
    }

    /**
     * Create an aliased <code>orms.users_users</code> table reference
     */
    public UsersUsers(Name alias) {
        this(alias, USERS_USERS);
    }

    /**
     * Create a <code>orms.users_users</code> table reference
     */
    public UsersUsers() {
        this(DSL.name("users_users"), null);
    }

    public <O extends Record> UsersUsers(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, USERS_USERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Orms.ORMS;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.USERS_USERS_PKEY;
    }

    @Override
    public List<UniqueKey<Record>> getUniqueKeys() {
        return Arrays.asList(Keys.USERS_USERS_EMAIL_KEY);
    }

    @Override
    public UsersUsers as(String alias) {
        return new UsersUsers(DSL.name(alias), this);
    }

    @Override
    public UsersUsers as(Name alias) {
        return new UsersUsers(alias, this);
    }

    @Override
    public UsersUsers as(Table<?> alias) {
        return new UsersUsers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersUsers rename(String name) {
        return new UsersUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersUsers rename(Name name) {
        return new UsersUsers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersUsers rename(Table<?> name) {
        return new UsersUsers(name.getQualifiedName(), null);
    }
}
