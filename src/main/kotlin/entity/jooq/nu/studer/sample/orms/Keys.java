/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.orms;


import nu.studer.sample.orms.tables.FlywaySchemaHistory;
import nu.studer.sample.orms.tables.UsersAccountActivationToken;
import nu.studer.sample.orms.tables.UsersAuthorities;
import nu.studer.sample.orms.tables.UsersPasswordResetToken;
import nu.studer.sample.orms.tables.UsersUsers;
import nu.studer.sample.orms.tables.UsersUsersAuthorities;

import org.jooq.ForeignKey;
import org.jooq.Record;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * orms.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<Record> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<Record> USERS_ACCOUNT_ACTIVATION_TOKEN_PKEY = Internal.createUniqueKey(UsersAccountActivationToken.USERS_ACCOUNT_ACTIVATION_TOKEN, DSL.name("users_account_activation_token_pkey"), new TableField[] { UsersAccountActivationToken.USERS_ACCOUNT_ACTIVATION_TOKEN.ID }, true);
    public static final UniqueKey<Record> USERS_AUTHORITIES_NAME_KEY = Internal.createUniqueKey(UsersAuthorities.USERS_AUTHORITIES, DSL.name("users_authorities_name_key"), new TableField[] { UsersAuthorities.USERS_AUTHORITIES.NAME }, true);
    public static final UniqueKey<Record> USERS_AUTHORITIES_PKEY = Internal.createUniqueKey(UsersAuthorities.USERS_AUTHORITIES, DSL.name("users_authorities_pkey"), new TableField[] { UsersAuthorities.USERS_AUTHORITIES.ID }, true);
    public static final UniqueKey<Record> USERS_PASSWORD_RESET_TOKEN_PKEY = Internal.createUniqueKey(UsersPasswordResetToken.USERS_PASSWORD_RESET_TOKEN, DSL.name("users_password_reset_token_pkey"), new TableField[] { UsersPasswordResetToken.USERS_PASSWORD_RESET_TOKEN.ID }, true);
    public static final UniqueKey<Record> USERS_USERS_EMAIL_KEY = Internal.createUniqueKey(UsersUsers.USERS_USERS, DSL.name("users_users_email_key"), new TableField[] { UsersUsers.USERS_USERS.EMAIL }, true);
    public static final UniqueKey<Record> USERS_USERS_PKEY = Internal.createUniqueKey(UsersUsers.USERS_USERS, DSL.name("users_users_pkey"), new TableField[] { UsersUsers.USERS_USERS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<Record, Record> USERS_ACCOUNT_ACTIVATION_TOKEN__USERS_ACCOUNT_ACTIVATION_TOKEN_USER_ID_FKEY = Internal.createForeignKey(UsersAccountActivationToken.USERS_ACCOUNT_ACTIVATION_TOKEN, DSL.name("users_account_activation_token_user_id_fkey"), new TableField[] { UsersAccountActivationToken.USERS_ACCOUNT_ACTIVATION_TOKEN.USER_ID }, Keys.USERS_USERS_PKEY, new TableField[] { UsersUsers.USERS_USERS.ID }, true);
    public static final ForeignKey<Record, Record> USERS_PASSWORD_RESET_TOKEN__USERS_PASSWORD_RESET_TOKEN_USER_ID_FKEY = Internal.createForeignKey(UsersPasswordResetToken.USERS_PASSWORD_RESET_TOKEN, DSL.name("users_password_reset_token_user_id_fkey"), new TableField[] { UsersPasswordResetToken.USERS_PASSWORD_RESET_TOKEN.USER_ID }, Keys.USERS_USERS_PKEY, new TableField[] { UsersUsers.USERS_USERS.ID }, true);
    public static final ForeignKey<Record, Record> USERS_USERS_AUTHORITIES__USERS_USERS_AUTHORITIES_AUTHORITY_ID_FKEY = Internal.createForeignKey(UsersUsersAuthorities.USERS_USERS_AUTHORITIES, DSL.name("users_users_authorities_authority_id_fkey"), new TableField[] { UsersUsersAuthorities.USERS_USERS_AUTHORITIES.AUTHORITY_ID }, Keys.USERS_AUTHORITIES_PKEY, new TableField[] { UsersAuthorities.USERS_AUTHORITIES.ID }, true);
    public static final ForeignKey<Record, Record> USERS_USERS_AUTHORITIES__USERS_USERS_AUTHORITIES_USER_ID_FKEY = Internal.createForeignKey(UsersUsersAuthorities.USERS_USERS_AUTHORITIES, DSL.name("users_users_authorities_user_id_fkey"), new TableField[] { UsersUsersAuthorities.USERS_USERS_AUTHORITIES.USER_ID }, Keys.USERS_USERS_PKEY, new TableField[] { UsersUsers.USERS_USERS.ID }, true);
}
